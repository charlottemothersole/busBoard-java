/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package busboard;

import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.net.HttpURLConnection;
import java.net.URI;
import java.net.URL;
import java.net.URLEncoder;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import java.io.UnsupportedEncodingException;
import java.io.DataInputStream;
import java.io.InputStream;
import java.io.FileInputStream;
import java.util.Scanner;
import java.net.http.HttpRequest.BodyPublishers;
import org.json.*;
import java.util.Collections;
import java.util.Comparator;
import java.util.List;
import netscape.javascript.JSException;

public class App {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        System.out.println("Please enter a bus stop code: ");
        String stopCode = scanner.nextLine();
        scanner.close();
        try {
            String urlString = "https://api.tfl.gov.uk/StopPoint/" + stopCode + "/Arrivals";
            //static method on the class
            HttpClient client = HttpClient.newHttpClient();
            //GET REQUEST
            HttpRequest request = HttpRequest.newBuilder().GET().uri(URI.create(urlString)).build();
                //EXAMPLE POST REQUEST
                // HttpRequest request = HttpRequest.newBuilder()
                //     .POST(
                //         BodyPublishers.ofString("<body of the request in string format>")
                //     ).build();
                //RESPONSE
            //client.send() takes http request and body handler i.e. how you want the body of response returned
            //The response now returns a String type in the structure of json, and looks like an array of objects
            HttpResponse<String> response = client.send(request, HttpResponse.BodyHandlers.ofString());
            // System.out.println(response.body());
            //Using the JSONArray library create a json array with the response body
            JSONArray jsonArray = new JSONArray(response.body());
            // System.out.println(jsonArray);
            // System.out.println(jsonArray + " is of type " + ((Object)jsonArray).getClass().getSimpleName());  
            // JSONObject jsonObject = jsonArray.getJSONObject(0);
            // System.out.println("This is getJSONObject for i 0" + jsonObject);
            // System.out.println("NAME!" + jsonObject.getString("modeName"));
            JSONArray sortedJsonArray = new JSONArray();
            int lengthOfArray = jsonArray.length();
            // for(int i=0 ; i<lengthOfArray; i++) {
            //     JSONObject jsonObject = jsonArray.getJSONObject(i);
            // }
            List list = new ArrayList();
            for(int i = 0; i < jsonArray.length(); i++) {
                list.add(jsonArray.getJSONObject(i));
            }
            System.out.println("Before Sorted JSONArray: " + jsonArray);
            Collections.sort(list, new Comparator() {
                private static final String KEY_NAME = "expectedArrival";
                @Override
                public int compare(JSONObject a, JSONObject b) {
                    String str1 = new String();
                    String str2 = new String();
                    try {
                    str1 = (String)a.get(KEY_NAME);
                    str2 = (String)b.get(KEY_NAME);
                    } catch(JSONException e) {
                    e.printStackTrace();
                    }
                    return str1.compareTo(str2);
                }
            });
            for(int i = 0; i < jsonArray.length(); i++) {
                sortedJsonArray.put(list.get(i));
            }
            System.out.println("Sorted JSON Array with Name: " + sortedJsonArray);
            
            for(int i=0 ; i< lengthOfArray; i++){   // iterate through jsonArray 
                JSONObject jsonObject = jsonArray.getJSONObject(i);  
                int routeNumber = jsonObject.getInt("lineName");
                System.out.println("Route " + routeNumber);
                //expectedArrival destinationName
            }
            // JSONObject mode = jsonObject.getJSONObject("modeName");
            // System.out.println("this is jsonObject.get lineId" + mode);
            // System.out.println(jsonObject + " is of type " + ((Object)jsonObject).getClass().getSimpleName()); 
        } catch (Exception e) {
        //     System.out.print("exception: " + e.getMessage());
        }
    }
}


